
```julia
using Gaston 
using CSV
```

```julia
"""
    ma_color(I;paso=5)

    Esta función crea una matriz de enteros cuyos valores representan las 
    densidades de un grupo (por ejemplo infectados) en un
    determinado día, resaltando el rango donde se repite con mayor frecuencia.
"""
function ma_color(I;paso=5,color=10) 
    a = [max(I[i]...) for i in 1:length(I)]
    dom = max(a...):-max(a...)/paso:0.0
    I_t = zeros(Int64,length(dom)-1,length(I))
    for i in 1:length(I)
            for j in 1:length(I[i])
                n = caja(I[i][j],dom)
                I_t[n,i]+=1
            end
            I_t[:,i]=round.(I_t[:,i].*color/max(I_t[:,i]...))
    end
    return I_t,max(a...)/paso
end
"""
    caja

    Esta función devuelve caja a la que se pertenece
"""
function caja(num,dom)
   for i in 1:length(dom)-1
        if num >= dom[i+1]
            return i
        end
    end
    return length(dom)-1
end
```

# SIR

\begin{eqnarray}
S(t+1) & = & S(t) - \frac{\beta I(t)S(t)}{N},               & \quad S(0) \ge 0,\\
I(t+1) & = & I(t) + \frac{\beta I(t) S(t)}{N} - \gamma I(t), & \quad I(0) \ge 0,\\
R(t+1) & = & R(t) + \gamma I(t),                             & \quad R(0) \ge 0.\\
\end{eqnarray}

Con:

   - $\beta$ la tasa de transmición.
   - $\gamma$ la tasa de recuperación.
   - $N = S_0+I_0+R_0$

Número reproductivo básico:

   - $R_0=\dfrac{\beta}{\gamma}$

```julia
include("Modelo_SIR.jl")
using Main.Modelo_SIR
```

```julia
dias = 250
t=0:1:dias
s,i,r=SIR(dias;β=0.3,γ=1/7,S₀=1e9,I₀=10,R₀=3)
plot(t,i,title=:Infectados,Axes(xlabel=:Dias,ylabel=:Infectados_prueba))
```

```julia
t,S,I,R,N=random_SIR(200,100000;S₀=6e4,I₀=30,R₀=5,Rmin=2.5,Rmax=3.3,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(N*n)*""*"'"
imagesc(P, title=:Infectados,Axes(title = label, palette = :summer))
save(term = "png",
     output= "calor_1.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```

```julia
t,S,I,R=random_SIR_2(200,80000;S0max=5e4,S0min=7e4,I0max=30,I0min=50
                    ,R0max=10,R0min=5,Rmin=2.5,Rmax=3.3,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(n)*""*"'"
imagesc(P, title=:Infectados_2,Axes(title = label, palette = :summer))
save(term = "png",
     output= "calor_2.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```

# SEIR

\begin{eqnarray}
S(t+1) & = & S(t) - \frac{\beta I(t) S(t)}{N},                & \quad S(0) \ge 0,\\
E(t+1) & = & E(t) + \frac{\beta I(t) S(t)}{N}  - \sigma E(t), & \quad E(0) \ge 0,\\
I(t+1) & = & I(t) + \sigma E(t) - \gamma I(t),                & \quad I(0) \ge 0,\\
R(t+1) & = & R(t) + \gamma I(t),                              & \quad R(0) \ge 0.\\
\end{eqnarray}

Con:

   - $\beta$ la tasa de transmición.
   - $\gamma$ la tasa de recuperación.
   - $\sigma$ la tasa de incubación.
   - $N=S_0+E_0+I_0+R_0$
   
Número reproductivo básico:

   - $R_0=\dfrac{\beta}{\gamma}$

```julia
include("Modelo_SEIR.jl")
using Main.Modelo_SEIR
```

```julia
dias = 400
t=0:1:dias
s,e,i,r=SEIR(dias;γ=1/7,β=0.3,σ=1/14,S₀=1e5,E₀=90,I₀=12,R₀=5)
plot(t,i,title=:Infectados,Axes(xlabel=:Dias,ylabel=:Infectados_prueba))
```

```julia
t,S,E,I,R,N=random_SEIR(400,100000;I₀=30,S₀=6e4,R₀=5,E₀=90,Rmin=2.5,Rmax=3.3,
                        amax=1/10,amin=1/15,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(N*n)*""*"'"
imagesc(P, title=:Infectados_3,Axes(title = label, palette = :hot))
save(term = "png",
     output= "calor_3.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```

```julia
t,S,E,I,R=random_SEIR_2(400,100000;I0min=30,I0max=40,S0min=5e4,S0max=7e4
                    ,R0min=5,R0max=10,E0min=90,E0max=100,Rmin=2.5,Rmax=3.3,
                        amax=1/10,amin=1/15,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(n)*""*"'"
imagesc(P, title=:Infectados_4,Axes(title = label, palette = :hot))
save(term = "png",
     output= "calor_4.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```

# Datos de México

```julia
D = CSV.read("casos_mexico.csv")
```

```julia
D[!,2][7]
```

```julia
function datos_por_estado(D,number,nmax,nmin)
    D_sol=Array{Float64,1}(undef, nmax-nmin+1)
    días = []
    for i in nmin:nmax
        D_sol[i-nmin+1]=D[!,i][number]
    end
    return D_sol
end
```

```julia
cdmx=datos_por_estado(D,7,140,80)
```

```julia
t,S,E,I,R,N=random_SEIR(60,100000;I₀=cdmx[1],S₀=6e4,R₀=5,E₀=90,Rmin=2.5,Rmax=3.3,
                        amax=1/10,amin=1/15,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(N*n)*""*"'"
imagesc(P, title=:Infectados_cdmx,Axes(title = label, palette = :hot))
plot!(t,cdmx./(N*n),title=:Datos_reales)
save(term = "png",
     output= "calor_5.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```

```julia
t,S,E,I,R=random_SEIR_2(60,100000;I0min=cdmx[1],I0max=cdmx[1]*2,S0min=5e4,S0max=6e4,
                        R0min=5,R0max=15,E0min=cdmx[1],E0max=cdmx[1],Rmin=2.5,Rmax=3.3,
                        amax=1/10,amin=1/15,gmax=1/10,gmin=1/15)
P,n = ma_color(I,paso=100)
label = "'1:"*""*string(n)*""*"'"
imagesc(P, title=:Infectados_cdmx_2,Axes(title = label, palette = :hot))
plot!(t,cdmx./(n),title=:Datos_reales)
save(term = "png",
     output= "calor_6.png",
     font = "Consolas,18",
     size = "1280,900",
     linewidth = 1,
     background = "white")
```
